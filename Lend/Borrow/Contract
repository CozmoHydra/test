// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
}

contract LendingContract {
    address public owner;
    mapping(address => uint256) public balances;
    mapping(address => mapping(address => uint256)) public allowances;
    
    event Deposit(address indexed from, uint256 amount);
    event Withdraw(address indexed to, uint256 amount);
    event Borrow(address indexed from, address indexed to, uint256 amount);
    event Repay(address indexed from, address indexed to, uint256 amount);
    
    constructor() {
        owner = msg.sender;
    }
    
    function deposit(address token, uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        IERC20(token).transferFrom(msg.sender, address(this), amount);
        balances[msg.sender] += amount;
        emit Deposit(msg.sender, amount);
    }
    
    function withdraw(address token, uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        IERC20(token).transfer(msg.sender, amount);
        balances[msg.sender] -= amount;
        emit Withdraw(msg.sender, amount);
    }
    
    function borrow(address token, address borrower, uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(balances[msg.sender] >= amount, "Insufficient balance");
        require(allowances[msg.sender][borrower] >= amount, "Insufficient allowance");
        IERC20(token).transfer(borrower, amount);
        balances[msg.sender] -= amount;
        emit Borrow(msg.sender, borrower, amount);
    }
    
    function repay(address token, address lender, uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        require(IERC20(token).allowance(msg.sender, address(this)) >= amount, "Insufficient allowance");
        IERC20(token).transferFrom(msg.sender, address(this), amount);
        balances[lender] += amount;
        emit Repay(msg.sender, lender, amount);
    }
    
    function approveAllowance(address spender, address token, uint256 amount) external {
        require(amount > 0, "Amount must be greater than 0");
        allowances[msg.sender][spender] = amount;
        IERC20(token).approve(spender, amount);
    }
}
